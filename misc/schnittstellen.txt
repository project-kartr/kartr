Legend: ? before attribute means optional
        [...] The brackets mean, that the attribute is a list.
              The brackets are not to be included in the query.
              The item separator has to be infered from the listing. (probably ',')

StoryUpload(poi_id:<uint>,headline:<text>,content:<text>,?files:[<file_id>,...],?story_id:<uint>)
  method: POST
  uri: /api/story-upload
  return: '{ "status": "success", "story_id": <uint> }'
  return: '{ "status": "failed" }'
  <file_id>: file ids generated by FileUpload
  files: comma separated list of file_id
  variants:
    - if files are present then the listed files are linked to the story
    - if story_id is present then StoryUpload is used to update an existing story

FileUpload(thefile:<binary>)
  method: POST
  uri: /api/file-upload
  return: '{ "status": "success", "file_id": "<file_id>"}'
  return: '{ "status": "failed" }'
  <file_id>: file ids generated by FileUpload, to be used in StoryUpload
    e.g.: 1669300756375_2f0a4873-d9ec-4458-b439-57ff4b64d952

PoiUpload(longitude:<number>,latitude:<number>,displayname:<text>)
  method: POST
  uri: /api/poi-upload
  return: '{ "status": "success", "poi_id": "<poi_id>"}'
  return: '{ "status": "failed" }'
  <poi_id>: id of POI generated by PoiUpload, to be used in StoryUpload

GetListOfPois()
  method: GET
  uri: /public/get-list-of-pois
  return: '{ "status": "failed" }'
  return: '{ "status": "success", "pois": [
    {
      "poi_id": <uint>,
      "longitude": <number>,
      "latitude": <number>,
      "displayname": "<text>",
      ?"is_owner": <bool>,
      "stories": [ <story_id:uint>, ... ]
    },
    ...
  ] }'

GetStoryById(story_id:<uint>)
  method: GET
  uri: /public/get-story-by-id
  return: '{ "status": "failed" }'
  return: '{
    "status": "success", 
    "story_id": <uint>,
    "headline": "<text>",
    "content": "<text>",
    "poi_id": <uint>,
    "account_displayname": "<text>",
    ?"is_owner": <bool>,
    "files": [ "<file_id>", ... ]
  }'

GetFileById(file_id:<uint>)
  method: GET
  uri: /public/get-file-by-id
  return:
    content-type: application/json
    data: '{ "status": "failed" }'
  return: 
    content-type: image/png
    data: <binary>
  #return: 
  #  content-type: image/jpg
  #  data: <binary>
  #return: 
  #  content-type: audio/... (TBD)
  #  data: <binary>

  # ------------ Login, Registration, Password-Reset ----------------

Login(email:<text>, password:<text>)
  method: POST
  uri: /auth/login
  return: '{ "status": "success", "displayName": "<displayName>"}'
  return: '{ "status": "failed", "description": "incorrect inputs"}'
  
Logout()
  method: POST
  uri: /api/logout
  return: '{ "status": "success"}'
  return: '{ "status": "failed"}'
  

Register(email:<text>, displayname:<text>, password:<text>)
  method: POST
  uri: /public/register
  return: '{ "status": "success", "description": "account created" }'
  return: '{ "status": "failed", "messages": <array of messages> }'

Confirm(hc:<hashCode>)
  method: GET
  uri: /public/confirm
  return: REDIRECT

ResetPasswordRequest(email:<text>)
  method: POST
  uri: /public/reset-password-request
  return: '{"status": "success", "description": "An email has been sent"}'
  return: '{"status": "failed", "description": "This email does not exist"}'

UpdatePassword(password:<text>, token:<text>)
  method: POST
  uri: /public/update-password
  return: '{"status": "success", "description": "Password updated"}'
  return: '{"status": "failed", "description": "token does not exists"}'
  return: '{"status": "failed", "description": "The given password counldn't be hashed"}'
  return: '{"status": "failed", "description": "DB counld not update the password"}'
